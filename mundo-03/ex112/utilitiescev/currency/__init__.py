def increase(value=0, rate=0, formatted=False):
    """
    #EN-US:
    → Calculates the increase of a certain price,
    returning the result with or without formatting.
    :param value: the price you want to readjust.
    :param rate: what is the percentage increase.
    :param formatted: want formatted output or not?
    :return: the adjusted value, with or without formatting.

    # PT-BR:
    → Calcula o aumento de um determinado preço,
    retornando o resultado com ou sem formatação.
    :param value: o preço que se quer reajustar.
    :param rate: qual é a porcentagem de aumento.
    :param formatted: quer a saída formatada ou não?
    :return: o valor reajustado, com ou sem formatação.
    """
    increased = value + (value * rate / 100)
    return increased if not formatted else currency(increased)


def decrease(value=0, rate=0, formatted=False):
    """
    #EN-US:
    → Calculates the reduction of a certain price,
    returning the result with or without formatting.
    :param value: the price you want to readjust.
    :param rate: what is the percentage of reduction.
    :param formatted: want formatted output or not?
    :return: the adjusted value, with or without formatting.

    #PT-BR:
    → Calcula a redução de um determinado preço,
    retornando o resultado com ou sem formatação.
    :param value: o preço que se quer reajustar.
    :param rate: qual é a porcentagem de redução.
    :param formatted: quer a saída formatada ou não?
    :return: o valor reajustado, com ou sem formatação.
    """
    decreased = value - (value * rate / 100)
    return decreased if not formatted else currency(decreased)


def double(value=0, formatted=False):
    """
    #EN-US:
    → Calculates twice a certain price,
    returning the result with or without formatting.
    :param value: the price you want to readjust.
    :param formatted: want formatted output or not?
    :return: the adjusted value, with or without formatting.

    #PT-BR:
    → Calcula o dobro de um determinado preço,
    retornando o resultado com ou sem formatação.
    :param value: o preço que se quer reajustar.
    :param formatted: quer a saída formatada ou não?
    :return: o valor reajustado, com ou sem formatação.
    """
    doubled = value * 2
    return doubled if not formatted else currency(doubled)


def half(value=0, formatted=False):
    """
    #EN-US:
    → Calculates half of a given price,
    returning the result with or without formatting.
    :param value: the price you want to readjust.
    :param formatted: want formatted output or not?
    :return: the adjusted value, with or without formatting.

    #PT-BR:
    → Calcula a metade de um determinado preço,
    retornando o resultado com ou sem formatação.
    :param value: o preço que se quer reajustar.
    :param formatted: quer a saída formatada ou não?
    :return: o valor reajustado, com ou sem formatação.
    """
    halved = value / 2
    return halved if not formatted else currency(halved)


def currency(value=0.0, currency='R$'):
    """
    #EN-US:
    → Formats the value to display it as a monetary value.
    :param value: the value to be formatted.
    :param currency: (Optional) the currency symbol that will be
    used for formatting. The default is Real (R$).
    :return: the value formatted with the informed symbol.

    #PT-BR:
    → Formata o valor para exibí-lo como valor monetário.
    :param value: o valor a ser formatado.
    :param currency: (Opcional) o símbolo da moeda que será usado
    para formatação. O padrão é Real (R$).
    :return: o valor formatado com o símbolo informado.
    """
    return f'{currency} {value:.2f}'.replace('.', ',')


def resume(value=0, rate_increase=0, rate_decrease=0):
    """
    #EN-US:
    → Displays a table with price calculations, using the
    increase(), decrease(), double(), half(), currency(),
    and findSizeInt() functions.
    :param value: the price that will be used for the
    calculations.
    :param rate_increase: rate of increase that will be
    used for the calculations.
    :param rate_decrease: reduction rate that will be
    used for the calculations.
    :return: the calculations generated by the functions,
    displaying them in tabular format.

    #PT-BR:
    → Exibe uma tabela com os cálculos do preço, usando as
    funções increase(), decrease(), double(), half(),
    currency(), e findSizeInt().
    :param value: o preço que será usado para os cálculos.
    :param rate_increase: taxa de aumento que será usada
    para os cálculos.
    :param rate_decrease: taxa de redução que será usada
    para os cálculos.
    :return: os cálculos gerados pelas funções, exibindo-os
    em formato tabular.
    """
    print('-' * 32)
    print(f'{"RESUMO DO VALOR":^30}')
    print('-' * 32)
    print(f'{"Preço analisado:":<20} {currency(value)}',)
    print(f'{"Dobro do preço:":<20} {double(value, True)}')
    print(f'{"Metade do preço:":<20} {half(value, True)}')
    print(f'{rate_increase}{"% de aumento:":<{20 - findSizeInt(rate_increase)}} {increase(value, rate_increase, True)}')
    print(f'{rate_decrease}{"% de redução:":<{20 - findSizeInt(rate_decrease)}} {decrease(value, rate_decrease, True)}')
    print('-' * 32)


def findSizeInt(number):
    """
    #EN-US:
    → Calculates the number of digits in a number.
    :param number: the number to be calculated.
    :return: the number of digits of the number entered.

    #PT-BR:
    → Calcula a quantidade de dígitos em um número.
    :param number: o número a ser calculado.
    :return: a quantidade de dígitos do número informado.
    """
    from math import floor, log10
    number = abs(int(number))
    return 1 if number == 0 else floor(log10(number)) + 1
